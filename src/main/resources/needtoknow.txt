java and maven configuratuion settings (intelij + OS)
mvn life cycle + plugin/dependency management

DATA base view Index coloms Triggers ne demek bunlar Data basedeki Tablerin icinde



### **Ana Bileşenler ve Açıklamaları**

1. **SECURITY (Güvenlik)**
   - Uygulamada güvenlik mekanizmalarını ifade eder. Yetkilendirme, kimlik doğrulama ve erişim kontrolleri burada yönetilir.

2. **SECURITY CONTEXT (Güvenlik Bağlamı)**
   - Kullanıcıların kimlik bilgilerini ve yetkilendirme detaylarını tutan bir bağlamdır. Örneğin, giriş yapmış kullanıcı bilgilerini saklar.

3. **CORE CONTEXT (Çekirdek Bağlam)**
   - Spring uygulamalarında Bean yönetimi gibi temel bileşenlerin yer aldığı bağlamdır.

4. **LOGGING (Günlükleme - Loglama)**
   - Uygulamanın çalışmasını izlemek ve hata ayıklamak için kullanılan loglama sistemini ifade eder.

5. **CONFIGURATION (Konfigürasyon - Yapılandırma)**
   - Uygulamanın yapılandırma ayarlarını içeren bölümdür. Örneğin, Spring Boot'ta `application.properties` veya `application.yml` dosyalarında
   yapılan ayarlamalar burada kullanılır.

6. **EXCEPTION HANDLING (İstisna Yönetimi - Hata Yönetimi)**
   - Uygulamada oluşabilecek hataları yakalamak ve yönetmek için kullanılan mekanizmadır.

---

### **Katmanlı Mimari ve Açıklamaları**

7. **CONTROLLER (Denetleyici Katmanı)**
   - HTTP isteklerini alıp uygun servislere yönlendiren katmandır. MVC mimarisinde "Controller" olarak bilinir.

8. **SERVICE (Servis Katmanı)**
   - İş mantığını içeren katmandır. Veritabanından alınan verilerin işlenmesi veya birleştirilmesi gibi işlemler burada yapılır.

9. **REPOSITORY (Veri Katmanı - Depo Katmanı)**
   - Veritabanı işlemlerini gerçekleştiren katmandır. Spring Data JPA gibi teknolojiler kullanılarak veri yönetimi sağlanır.

10. **DB (Veritabanı - Database)**
    - Uygulamanın kalıcı veri saklama alanıdır. PostgreSQL, MySQL veya başka bir veritabanı olabilir.

---

### **Veri ve Dönüşüm Katmanları**

11. **PAYLOAD**
    - API isteklerinde ve cevaplarında taşınan veri paketidir. Genellikle JSON veya XML formatında olabilir.

12. **DTO / DAO (Data Transfer Object / Data Access Object)**
    - DTO (Veri Transfer Nesnesi): Verileri taşımak için kullanılan nesnedir.
    - DAO (Veri Erişim Nesnesi): Veritabanına erişimi sağlayan nesnedir.

13. **ENTITY (Varlık Katmanı)**
    - Veritabanı tablolarına karşılık gelen nesnelerdir. Spring Data JPA ile eşlenerek veritabanındaki yapıyı temsil eder.

14. **MAPPER (Dönüştürücü - Eşleyici)**
    - DTO ile Entity arasında veri dönüşümü yapmak için kullanılır. MapStruct gibi kütüphaneler kullanılabilir.

---

### **Diğer Yardımcı Bileşenler**

15. **validator (Doğrulayıcı)**
    - Kullanıcıdan gelen verilerin doğruluğunu kontrol etmek için kullanılır. Örneğin, `@Valid` veya `@NotNull` gibi Spring doğrulama
    anotasyonları burada devreye girer.

16. **pageableHelper (Sayfalama Yardımcısı)**
    - Büyük veri setlerini sayfalama (pagination) ile yönetmek için kullanılan bir yardımcı sınıftır. Spring Data JPA'nın `Pageable` arayüzü kullanılabilir.

---

### **Özet**
Bu görsel, tipik bir **Spring Boot çok katmanlı mimari yapısını** gösteriyor.
- **Güvenlik (Security)** ve **Core Context** üst seviyede yer alıyor.
- **Controller → Service → Repository → Database** şeklinde tipik bir iş akışı var.
- **DTO, Entity, Mapper ve Validator** gibi yardımcı bileşenler veri yönetimi ve işlenmesinde görev alıyor.
- **Exception Handling, Logging ve Configuration** uygulamanın genel yönetimini sağlıyor.

Bu mimari genellikle **Spring Boot Rest API projelerinde** kullanılır.



//*****************************************************************************************************************************************
Java'da "builder" deseni, özellikle karmaşık nesne oluşturma süreçlerini daha okunabilir ve yönetilebilir hale getirmek için kullanılan
bir tasarım desenidir. Bu deseni uygulamak için elle kod yazılabileceği gibi, Lombok gibi kütüphaneler de @Builder gibi anotasyonlar sunarak
bu işlemi otomatikleştirir.

Lombok @Builder Anotasyonu Nedir?
@Builder anotasyonu, Lombok kütüphanesi tarafından sağlanır ve bir sınıf veya metod için otomatik olarak bir "builder" sınıfı oluşturur.
Bu sayede, sınıfınızın nesnelerini daha okunabilir, zincirleme (fluent) metod çağrılarıyla oluşturabilirsiniz. Özellikle çok sayıda parametreye
sahip veya bazı parametreleri opsiyonel olan sınıflar için bu desen oldukça kullanışlıdır.

Temel Özellikleri
Okunabilir Kod: Nesneleri oluştururken, hangi değerin hangi alanı temsil ettiğini metod isimleri sayesinde rahatça görebilirsiniz.
Zincirleme (Fluent) Kullanım: Oluşturma sürecinde metodları zincirleme şekilde çağırarak daha temiz bir kod yazabilirsiniz.
Opsiyonel Parametreler: Farklı kombinasyonlarda parametrelerin verilmesine olanak tanır, böylece birden fazla constructor yazma
gereksinimini ortadan kaldırır.

Builder Deseninin Avantajları
İnşa Sürecinin Yönetilmesi: Karmaşık nesnelerin adım adım inşasını sağlar.
Immutable Nesneler: Genellikle immutable (değişmez) nesneler oluştururken tercih edilir, çünkü nesne oluşturulduktan sonra alanlar değiştirilemez.
Kod Tekrarını Azaltır: Farklı parametre kombinasyonları için birden fazla constructor yazmak yerine tek bir builder yapısı kullanılır.
Sonuç
Java'da @Builder anotasyonu, özellikle Lombok kütüphanesi ile birlikte kullanıldığında, nesne oluşturma işlemlerini kolaylaştırır,
kodun okunabilirliğini artırır ve bakımı daha da basitleştirir. Builder desenini uygulamak manuel olarak da yapılabilir ancak Lombok sayesinde
bu işlem otomatikleştirilir ve yazılan kod miktarı azalır.


//*****************************************************************************************************************************************


